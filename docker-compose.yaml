version: "3"
services:
  bot:
    image: bot_image
    build:
      context: ./bot
      dockerfile: Dockerfile
    ports:
      - "1313:1313"
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - my_net

  db:
    image: db_image
    container_name: db
    build:
      context: ./db
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    env_file:
      - .env
    command: |
      postgres
        -c log_replication_commands=on
        -c logging_collector=on
        -c log_directory=/log
        -c log_filename=postgresql.log
        -c log_statement=all
        -c wal_level=replica
        -c hot_standby=on
        -c max_wal_senders=10
        -c max_replication_slots=10
        -c hot_standby_feedback=on
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - my_net

  db_repl:
    image: db_repl_image
    user: postgres
    build:
      context: ./db_repl
      dockerfile: Dockerfile
    environment:
      PGUSER: repl
      PGPASSWORD: kali
    ports:
      - "5433:5432"
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=db --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    depends_on:
      - db
    networks:
      - my_net
volumes:
  pgdata:
  pglogs:
networks:
  my_net:
    driver: bridge
